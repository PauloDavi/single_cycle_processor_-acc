module control #(parameter INTRUCTION_WIDTH = 10,
                 parameter DATA_WIDTH = 8,
                 parameter OPERATIONS_SELECTOR_WIDTH = 3)
                (clk,
                 instruction,
                 output_data);
  input clk;
  
  output reg output_data;
  
  reg md_select, mb_select, ram_enable, load_enable;
  reg [operation_selector_OPERATIONS_WIDTH - 1:0] operation_selector, selector_reg_a, selector_reg_b, destination_select;
  reg [DATA_WIDTH - 1:0] constant_in;
  reg reset;
  
  wire zero_flag, carrier_flag, negative_flag;
  
  wire [INTRUCTION_WIDTH - 1:0] instruction;
  data_unit #(DATA_WIDTH) data_unit_instance (clk, ram_enable, load_enable, operation_select, selector_reg_a, selector_reg_b, destination_select, constant_in, mb_select, md_select, output_data, zero_flag, carrier_flag, negative_flag);
  instruction_memory #(INTRUCTION_WIDTH) instruction_memory_instance (addr, instruction);
  pc pc_instance (clk, reset, pc_count, jump_enable, jump_value);
  
  always @(*) begin
    case (instruction[9:6])
      4'b0000: begin // ADD
        operation_selector <= 3'b000;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        selector_reg_b     <= instruction[2:0];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b0001: begin // SUB
        operation_selector <= 3'b001;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        selector_reg_b     <= instruction[2:0];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b0010: begin // ADDi
        operation_selector <= 3'b000;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        constant_in        <= instruction[2:0];
        mb_select          <= 1'b1;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b0011: begin // SUBi
        operation_selector <= 3'b001;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        constant_in        <= instruction[2:0];
        mb_select          <= 1'b1;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b0100: begin // MUL2
        operation_selector <= 3'b010;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b0101: begin //DIV2
        operation_selector <= 3'b011;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b0110: begin // CLR
        operation_selector <= 3'b100;
        destination_select <= instruction[5:3];
        constant_in        <= 3'b000;
        mb_select          <= 1'b1;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b0111: begin // RST
      end
      4'b1000: begin // MOV
        operation_selector <= 3'b100;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[2:0];
        selector_reg_b     <= instruction[5:3];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b1001:begin // JMP
      end
      4'b1010: begin // OUT
      end
      4'b1011: begin // LOAD
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        selector_reg_b     <= instruction[2:0];
        mb_select          <= 1'b0;
        md_select          <= 1'b1;
        ram_enable         <= 1'b1;
        load_enable        <= 1'b1;
      end
      4'b1100: begin // STORE
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        selector_reg_b     <= instruction[2:0];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b1;
        load_enable        <= 1'b0;
      end
      4'b1101: begin // AND
        operation_selector <= 3'b101;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        selector_reg_b     <= instruction[2:0];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b1110: begin // OR
        operation_selector <= 3'b110;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        selector_reg_b     <= instruction[2:0];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
      4'b1111: begin // XOR
        operation_selector <= 3'b111;
        destination_select <= instruction[5:3];
        selector_reg_a     <= instruction[5:3];
        selector_reg_b     <= instruction[2:0];
        mb_select          <= 1'b0;
        md_select          <= 1'b0;
        ram_enable         <= 1'b0;
        load_enable        <= 1'b1;
      end
    endcase
  end
endmodule
