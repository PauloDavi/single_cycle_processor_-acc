module data_unit #(parameter DATA_WIDTH = 8,
                   parameter RAM_ADDR_BITS = 6)
                  (clk,
                   ram_enable,
                   load_enable,
                   operation_select,
                   a_select,
                   b_select,
                   destination_select,
                   constant_in,
                   mb_select,
                   md_select,
                   output_data,
                   zero_flag,
                   carrier_flag,
                   negative_flag);
  input clk, ram_enable, load_enable, mb_select, md_select;
  input [1:0] a_select, b_select, destination_select;
  input [DATA_WIDTH - 1:0] constant_in;
  
  output reg zero_flag, carrier_flag, negative_flag;
  output reg [DATA_WIDTH - 1:0] output_data;
  
  reg [DATA_WIDTH - 1:0] out_alu, reg_a, reg_b, data_in, ram_output_data;
  
  reg_file #(DATA_WIDTH, 2) reg_file_instance (output_data, clk, load_enable, destination_select, a_select, b_select, reset, reg_a, reg_b);
  alu #(DATA_WIDTH) alu_instance (reg_a, data_in, operation_select, out_alu, zero_flag, carrier_flag, negative_flag);
  ram #(DATA_WIDTH, RAM_ADDR_BITS) ram_instance (clk, ram_enable, write_enable, reg_a, data_in, ram_output_data);
  
  always @(*) begin
    if (mb_select == 0)
      data_in = reg_b;
    else
      data_in = constant_in;
  end
  
  always @(*) begin
    if (md_select == 0)
      output_data = out_alu;
    else
      output_data = ram_output_data;
  end
endmodule
